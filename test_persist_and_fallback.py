import asyncio
import sys
import os
from dotenv import load_dotenv

# Add the app directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

load_dotenv()

async def test_persist_and_fallback():
    """Test persist user interaction v√† fallback suggest_general_options"""
    print("üß™ Hi Nam - ƒêang test persist user interaction v√† fallback suggest_general_options...")
    
    try:
        from app.services.chat_flow import run_chat_flow
        from app.repositories.chat_repository import ChatRepository
        from app.services.llm_service_factory import LLMServiceFactory
        from app.db.database import get_db
        
        # T·∫°o mock objects
        db = next(get_db())
        repository = ChatRepository(db)
        llm_service = LLMServiceFactory.create_llm_service()
        
        # Test cases cho suggest_general_options
        test_cases = [
            {
                "user_message": "T√¥i c·∫ßn g·ª£i √Ω dinh d∆∞·ª°ng chung",
                "description": "Y√™u c·∫ßu g·ª£i √Ω chung - n√™n trigger suggest_general_options",
                "expected_fallback": True
            },
            {
                "user_message": "G·ª£i √Ω ƒë·ªì u·ªëng t·ªët cho s·ª©c kh·ªèe",
                "description": "Y√™u c·∫ßu ƒë·ªì u·ªëng chung - test template ƒë·ªì u·ªëng",
                "expected_fallback": True
            },
            {
                "user_message": "T√¥i c√≥ b·ªánh tim m·∫°ch, n√™n ƒÉn g√¨?",
                "description": "C√≥ v·∫•n ƒë·ªÅ s·ª©c kh·ªèe - test template s·ª©c kh·ªèe",
                "expected_fallback": False
            },
            {
                "user_message": "T√¥i mu·ªën gi·∫£m c√¢n, g·ª£i √Ω th·ª±c ƒë∆°n",
                "description": "Gi·∫£m c√¢n - test template gi·∫£m c√¢n", 
                "expected_fallback": True
            }
        ]
        
        conversation_id = 888
        user_id = 1
        
        for i, test_case in enumerate(test_cases):
            print(f"\n{'='*70}")
            print(f"üìù TEST CASE {i+1}: {test_case['description']}")
            print(f"üì® User message: {test_case['user_message']}")
            print(f"üîÄ Expected fallback: {test_case['expected_fallback']}")
            
            try:
                # Ch·∫°y chat flow
                result = await run_chat_flow(
                    user_message=test_case['user_message'],
                    user_id=user_id,
                    conversation_id=conversation_id + i,  # Unique conversation
                    messages=[],
                    repository=repository,
                    llm_service=llm_service
                )
                
                print(f"‚úÖ Test case {i+1} ho√†n th√†nh:")
                
                # Ki·ªÉm tra user_message_id_db
                user_msg_id = result.get('user_message_id_db')
                print(f"   - user_message_id_db: {user_msg_id}")
                if user_msg_id and user_msg_id > 0:
                    print("   ‚úÖ user_message_id_db h·ª£p l·ªá")
                else:
                    print("   ‚ùå user_message_id_db kh√¥ng h·ª£p l·ªá")
                
                # Ki·ªÉm tra assistant_message_id_db  
                assistant_msg_id = result.get('assistant_message_id_db')
                print(f"   - assistant_message_id_db: {assistant_msg_id}")
                if assistant_msg_id and assistant_msg_id > 0:
                    print("   ‚úÖ assistant_message_id_db h·ª£p l·ªá")
                else:
                    print("   ‚ùå assistant_message_id_db kh√¥ng h·ª£p l·ªá")
                
                # Ki·ªÉm tra final_response
                final_response = result.get('final_response', '')
                print(f"   - Response length: {len(final_response)} chars")
                print(f"   - Response preview: {final_response[:100]}...")
                
                # Ki·ªÉm tra suggest_general_options
                suggest_general = result.get('suggest_general_options', False)
                print(f"   - suggest_general_options: {suggest_general}")
                
                # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng response
                if final_response:
                    if any(emoji in final_response for emoji in ['ü•ó', 'üç≤', 'ü•£', 'üçú', 'ü•§', 'üçµ', 'ü•õ']):
                        print("   ‚úÖ Response c√≥ emoji ph√π h·ª£p")
                    else:
                        print("   ‚ö†Ô∏è Response thi·∫øu emoji")
                        
                    if len(final_response) > 200:
                        print("   ‚úÖ Response ƒë·ªß chi ti·∫øt")
                    else:
                        print("   ‚ö†Ô∏è Response c√≥ th·ªÉ qu√° ng·∫Øn")
                        
                    if '?' in final_response[-50:]:  # Ki·ªÉm tra c√≥ c√¢u h·ªèi cu·ªëi kh√¥ng
                        print("   ‚úÖ Response c√≥ c√¢u h·ªèi m·ªùi ti·∫øp t·ª•c")
                    else:
                        print("   ‚ö†Ô∏è Response thi·∫øu c√¢u h·ªèi m·ªùi ti·∫øp t·ª•c")
                        
                else:
                    print("   ‚ùå Kh√¥ng c√≥ final_response")
                
                # Ki·ªÉm tra error
                error = result.get('error')
                if error:
                    print(f"   ‚ö†Ô∏è C√≥ error: {error}")
                else:
                    print("   ‚úÖ Kh√¥ng c√≥ error")
                    
            except Exception as e:
                print(f"üí• L·ªói trong test case {i+1}: {str(e)}")
                import traceback
                traceback.print_exc()
                
        print(f"\n{'='*70}")
        print("‚úÖ Ho√†n th√†nh t·∫•t c·∫£ test cases!")
        
    except Exception as e:
        print(f"üí• L·ªói t·ªïng qu√°t trong test: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_persist_and_fallback()) 